        - function run_once!(input::Array{Int8,N}, inter::Array{Int8,N}, offset::Int, bounds::NTuple{N,Int}) where N
 49273465     I1 = oneunit(CartesianIndex(bounds))
        0     for I in CartesianIndices(bounds)
        0         J = I + offset * I1
        0         for K in -I1:I1
        0             inter[J + K] += input[J]
        -         end
        0         inter[J] -= input[J]
        -     end
        - 
        0     for I in CartesianIndices(bounds .+ 2)
        0         J = I + (offset - 1) * I1
        0         if (input[J] == 0 && inter[J] == 3) || (input[J] == 1 && 2 <= inter[J] <= 3)
        0             input[J] = 1
        -         else
        0             input[J] = 0
        -         end
        -     end
        - end
        - 
        - function make_tuple(x, y, z, n::Int)
        -     return tuple(x, y, fill(z, n - 2)...)
        - end 
        - 
        - function run(initial::Array{Int8,2}, n_dims, n_steps)
        0     x, y = size(initial)
      336     dims = make_tuple(x + 2n_steps, y + 2n_steps, 1 + 2n_steps, n_dims)
  2178802     B = zeros(Int8, dims)
   351296     n_neighbors = zeros(Int8, dims)
 27440253     B[make_tuple((n_steps + 1):(n_steps + x), (n_steps + 1):(n_steps + y), n_steps + 1, n_dims)...] = initial
        - 
        0     for i::Int8 in 0:(n_steps - 1)
        0         fill!(n_neighbors, zero(Int8))
     2720         run_once!(B, n_neighbors, n_steps - i, make_tuple(x + 2i, y + 2i, 1 + 2i, n_dims))
        -     end
  7830030     return sum(B)
        - end
        - 
        - 
        - open("input-17") do file
 88933215     initial::Array{Int8,2} = transpose(hcat([[c == '.' ? 0 : 1 for c in line] for line in eachline(file)]...))
  1436908     println(run(initial, 3, 6))
  1017552     @time println(run(initial, 4, 10))
        - end
